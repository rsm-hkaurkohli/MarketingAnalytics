[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hargun Kaur Kohli",
    "section": "",
    "text": "I am a Master’s student in Business Analytics at UC San Diego, with a focus on customer and marketing analytics. I have hands-on experience in digital marketing, product analytics, and business analysis through internships at The Brand Blueprint Podcast, Ernst and Young, and Govind Milk and Milk Products. Currently, I lead a capstone project developing anomaly detection models for 340B demand forecasting in the pharmaceutical sector. Proficient in Python, SQL, Tableau, and Power BI, I am keen to apply my analytical skills to drive data-driven business solutions"
  },
  {
    "objectID": "projects/Project 1/hw2_questions.html",
    "href": "projects/Project 1/hw2_questions.html",
    "title": "Poisson Regression Examples",
    "section": "",
    "text": "Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty’s software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty’s software and after using it. Unfortunately, such data is not available.\nHowever, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm’s number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty’s software. The marketing team would like to use this data to make the claim that firms using Blueprinty’s software are more successful in getting their patent applications approved.\n\n\n\ntodo: Read in data.\ntodo: Compare histograms and means of number of patents by customer status. What do you observe?\nBlueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.\ntodo: Compare regions and ages by customer status. What do you observe?\n\n\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\ntodo: Write down mathematically the likelihood for \\(Y \\sim \\text{Poisson}(\\lambda)\\). Note that \\(f(Y|\\lambda) = e^{-\\lambda}\\lambda^Y/Y!\\).\ntodo: Code the likelihood (or log-likelihood) function for the Poisson model. This is a function of lambda and Y. For example:\npoisson_loglikelihood &lt;- function(lambda, Y){\n   ...\n}\ntodo: Use your function to plot lambda on the horizontal axis and the likelihood (or log-likelihood) on the vertical axis for a range of lambdas (use the observed number of patents as the input for Y).\ntodo: If you’re feeling mathematical, take the first derivative of your likelihood or log-likelihood, set it equal to zero and solve for lambda. You will find lambda_mle is Ybar, which “feels right” because the mean of a Poisson distribution is lambda.\ntodo: Find the MLE by optimizing your likelihood function with optim() in R or sp.optimize() in Python.\n\n\n\nNext, we extend our simple Poisson model to a Poisson Regression Model such that \\(Y_i = \\text{Poisson}(\\lambda_i)\\) where \\(\\lambda_i = \\exp(X_i'\\beta)\\). The interpretation is that the success rate of patent awards is not constant across all firms (\\(\\lambda\\)) but rather is a function of firm characteristics \\(X_i\\). Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.\ntodo: Update your likelihood or log-likelihood function with an additional argument to take in a covariate matrix X. Also change the parameter of the model from lambda to the beta vector. In this model, lambda must be a positive number, so we choose the inverse link function g_inv() to be exp() so that \\(\\lambda_i = e^{X_i'\\beta}\\). For example:\npoisson_regression_likelihood &lt;- function(beta, Y, X){\n   ...\n}\ntodo: Use your function along with R’s optim() or Python’s sp.optimize() to find the MLE vector and the Hessian of the Poisson model with covariates. Specifically, the first column of X should be all 1’s to enable a constant term in the model, and the subsequent columns should be age, age squared, binary variables for all but one of the regions, and the binary customer variable. Use the Hessian to find standard errors of the beta parameter estimates and present a table of coefficients and standard errors.\ntodo: Check your results using R’s glm() function or Python sm.GLM() function.\ntodo: Interpret the results.\ntodo: What do you conclude about the effect of Blueprinty’s software on patent success? Because the beta coefficients are not directly interpretable, it may help to create two fake datasets: X_0 and X_1 where X_0 is the X data but with iscustomer=0 for every observation and X_1 is the X data but with iscustomer=1 for every observation. Then, use X_0 and your fitted model to get the vector of predicted number of patents (y_pred_0) for every firm in the dataset, and use X_1 to get Y_pred_1 for every firm. Then subtract y_pred_1 minus y_pred_0 and take the average of that vector of differences."
  },
  {
    "objectID": "projects/Project 1/hw2_questions.html#blueprinty-case-study",
    "href": "projects/Project 1/hw2_questions.html#blueprinty-case-study",
    "title": "Poisson Regression Examples",
    "section": "",
    "text": "Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty’s software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty’s software and after using it. Unfortunately, such data is not available.\nHowever, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm’s number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty’s software. The marketing team would like to use this data to make the claim that firms using Blueprinty’s software are more successful in getting their patent applications approved.\n\n\n\ntodo: Read in data.\ntodo: Compare histograms and means of number of patents by customer status. What do you observe?\nBlueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.\ntodo: Compare regions and ages by customer status. What do you observe?\n\n\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\ntodo: Write down mathematically the likelihood for \\(Y \\sim \\text{Poisson}(\\lambda)\\). Note that \\(f(Y|\\lambda) = e^{-\\lambda}\\lambda^Y/Y!\\).\ntodo: Code the likelihood (or log-likelihood) function for the Poisson model. This is a function of lambda and Y. For example:\npoisson_loglikelihood &lt;- function(lambda, Y){\n   ...\n}\ntodo: Use your function to plot lambda on the horizontal axis and the likelihood (or log-likelihood) on the vertical axis for a range of lambdas (use the observed number of patents as the input for Y).\ntodo: If you’re feeling mathematical, take the first derivative of your likelihood or log-likelihood, set it equal to zero and solve for lambda. You will find lambda_mle is Ybar, which “feels right” because the mean of a Poisson distribution is lambda.\ntodo: Find the MLE by optimizing your likelihood function with optim() in R or sp.optimize() in Python.\n\n\n\nNext, we extend our simple Poisson model to a Poisson Regression Model such that \\(Y_i = \\text{Poisson}(\\lambda_i)\\) where \\(\\lambda_i = \\exp(X_i'\\beta)\\). The interpretation is that the success rate of patent awards is not constant across all firms (\\(\\lambda\\)) but rather is a function of firm characteristics \\(X_i\\). Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.\ntodo: Update your likelihood or log-likelihood function with an additional argument to take in a covariate matrix X. Also change the parameter of the model from lambda to the beta vector. In this model, lambda must be a positive number, so we choose the inverse link function g_inv() to be exp() so that \\(\\lambda_i = e^{X_i'\\beta}\\). For example:\npoisson_regression_likelihood &lt;- function(beta, Y, X){\n   ...\n}\ntodo: Use your function along with R’s optim() or Python’s sp.optimize() to find the MLE vector and the Hessian of the Poisson model with covariates. Specifically, the first column of X should be all 1’s to enable a constant term in the model, and the subsequent columns should be age, age squared, binary variables for all but one of the regions, and the binary customer variable. Use the Hessian to find standard errors of the beta parameter estimates and present a table of coefficients and standard errors.\ntodo: Check your results using R’s glm() function or Python sm.GLM() function.\ntodo: Interpret the results.\ntodo: What do you conclude about the effect of Blueprinty’s software on patent success? Because the beta coefficients are not directly interpretable, it may help to create two fake datasets: X_0 and X_1 where X_0 is the X data but with iscustomer=0 for every observation and X_1 is the X data but with iscustomer=1 for every observation. Then, use X_0 and your fitted model to get the vector of predicted number of patents (y_pred_0) for every firm in the dataset, and use X_1 to get Y_pred_1 for every firm. Then subtract y_pred_1 minus y_pred_0 and take the average of that vector of differences."
  },
  {
    "objectID": "projects/Project 1/hw2_questions.html#airbnb-case-study",
    "href": "projects/Project 1/hw2_questions.html#airbnb-case-study",
    "title": "Poisson Regression Examples",
    "section": "AirBnB Case Study",
    "text": "AirBnB Case Study\n\nIntroduction\nAirBnB is a popular platform for booking short-term rentals. In March 2017, students Annika Awad, Evan Lebo, and Anna Linden scraped of 40,000 Airbnb listings from New York City. The data include the following variables:\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n- `id` = unique ID number for each unit\n- `last_scraped` = date when information scraped\n- `host_since` = date when host first listed the unit on Airbnb\n- `days` = `last_scraped` - `host_since` = number of days the unit has been listed\n- `room_type` = Entire home/apt., Private room, or Shared room\n- `bathrooms` = number of bathrooms\n- `bedrooms` = number of bedrooms\n- `price` = price per night (dollars)\n- `number_of_reviews` = number of reviews for the unit on Airbnb\n- `review_scores_cleanliness` = a cleanliness score from reviews (1-10)\n- `review_scores_location` = a \"quality of location\" score from reviews (1-10)\n- `review_scores_value` = a \"quality of value\" score from reviews (1-10)\n- `instant_bookable` = \"t\" if instantly bookable, \"f\" if not\n\n\n\ntodo: Assume the number of reviews is a good proxy for the number of bookings. Perform some exploratory data analysis to get a feel for the data, handle or drop observations with missing values on relevant variables, build one or more models (e.g., a poisson regression model for the number of bookings as proxied by the number of reviews), and interpret model coefficients to describe variation in the number of reviews as a function of the variables provided."
  },
  {
    "objectID": "projects/Project 1/MAA2.html",
    "href": "projects/Project 1/MAA2.html",
    "title": "1 DATA",
    "section": "",
    "text": "# Importing required libraries\nimport pandas as pd\n\n# Load the Blueprinty dataset\ndata = pd.read_csv('blueprinty.csv')\n\n# Inspect the first few rows\ndata.head()\n\n\n\n\n\n\n\n\npatents\nregion\nage\niscustomer\n\n\n\n\n0\n0\nMidwest\n32.5\n0\n\n\n1\n3\nSouthwest\n37.5\n0\n\n\n2\n4\nNorthwest\n27.0\n1\n\n\n3\n3\nNortheast\n24.5\n0\n\n\n4\n3\nSouthwest\n37.0\n0"
  },
  {
    "objectID": "projects/Project 1/MAA2.html#estimation-of-simple-poisson-model",
    "href": "projects/Project 1/MAA2.html#estimation-of-simple-poisson-model",
    "title": "1 DATA",
    "section": "2. Estimation of Simple Poisson Model",
    "text": "2. Estimation of Simple Poisson Model\n\nWrite down mathematically the likelihood for \\(Y \\sim \\text{Poisson}(\\lambda)\\). Note that \\(f(Y|\\lambda) = e^{-\\lambda}\\lambda^Y/Y!\\).\n\n\n\nimage.png\n\n\n\n\nCode the likelihood (or log-likelihood) function for the Poisson model. This is a function of lambda and Y. For example:_\npoisson_loglikelihood &lt;- function(lambda, Y){\n   ...\n}\n\nimport numpy as np\nfrom scipy.special import gammaln  # for stable log(Y!) computation\n\n# Define the Poisson log-likelihood function\ndef poisson_loglikelihood(lam, Y):\n    \"\"\"\n    Computes the negative log-likelihood for Poisson model.\n\n    Parameters:\n    lam (float): Lambda parameter of the Poisson distribution\n    Y (array-like): Array of observed count data (e.g., patents)\n\n    Returns:\n    float: Negative log-likelihood (for use with optimizers)\n    \"\"\"\n    if lam &lt;= 0:\n        return np.inf  # to handle invalid (non-positive) lambda\n\n    n = len(Y)\n    log_likelihood = -n * lam + np.sum(Y * np.log(lam)) - np.sum(gammaln(Y + 1))\n    return -log_likelihood  # return negative because optimizers minimize\n\n\n\n\nUse your function to plot lambda on the horizontal axis and the likelihood (or log-likelihood) on the vertical axis for a range of lambdas (use the observed number of patents as the input for Y)._\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.special import gammaln\n\n# Define the Poisson log-likelihood function\ndef poisson_loglikelihood(lam, Y):\n    if lam &lt;= 0:\n        return np.inf\n    n = len(Y)\n    log_likelihood = -n * lam + np.sum(Y * np.log(lam)) - np.sum(gammaln(Y + 1))\n    return -log_likelihood  # for minimization\n\n# Load data\nimport pandas as pd\ndata = pd.read_csv('blueprinty.csv')\nY = data['patents'].values\n\n# Generate lambda values and evaluate log-likelihood\nlambda_values = np.linspace(0.1, 10, 200)\nlog_likelihoods = [-poisson_loglikelihood(lam, Y) for lam in lambda_values]\n\n# Plot\nplt.figure(figsize=(8, 5))\nplt.plot(lambda_values, log_likelihoods, color='blue')\nplt.axvline(x=np.mean(Y), color='red', linestyle='--', label='Sample Mean (MLE)')\nplt.title('Log-Likelihood of Poisson Model')\nplt.xlabel('Lambda (λ)')\nplt.ylabel('Log-Likelihood')\nplt.grid(True)\nplt.legend()\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "projects/Project 1/MAA2.html#if-youre-feeling-mathematical-take-the-first-derivative-of-your-likelihood-or-log-likelihood-set-it-equal-to-zero-and-solve-for-lambda.-you-will-find-lambda_mle-is-ybar-which-feels-right-because-the-mean-of-a-poisson-distribution-is-lambda._",
    "href": "projects/Project 1/MAA2.html#if-youre-feeling-mathematical-take-the-first-derivative-of-your-likelihood-or-log-likelihood-set-it-equal-to-zero-and-solve-for-lambda.-you-will-find-lambda_mle-is-ybar-which-feels-right-because-the-mean-of-a-poisson-distribution-is-lambda._",
    "title": "1 DATA",
    "section": "If you’re feeling mathematical, take the first derivative of your likelihood or log-likelihood, set it equal to zero and solve for lambda. You will find lambda_mle is Ybar, which “feels right” because the mean of a Poisson distribution is lambda._",
    "text": "If you’re feeling mathematical, take the first derivative of your likelihood or log-likelihood, set it equal to zero and solve for lambda. You will find lambda_mle is Ybar, which “feels right” because the mean of a Poisson distribution is lambda._\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\n\nFind the MLE by optimizing your likelihood function with optim() in R or sp.optimize() in Python.\n\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import minimize\nfrom scipy.special import gammaln\n\n# Load data\ndata = pd.read_csv('blueprinty.csv')\nY = data['patents'].values\n\n# Define the negative log-likelihood function for optimization\ndef poisson_neg_loglikelihood(lam, Y):\n    lam = lam[0]  # unpack scalar from array\n    if lam &lt;= 0:\n        return np.inf\n    n = len(Y)\n    log_likelihood = -n * lam + np.sum(Y * np.log(lam)) - np.sum(gammaln(Y + 1))\n    return -log_likelihood  # return negative for minimization\n\n# Initial guess: sample mean\nlambda_start = [np.mean(Y)]\n\n# Perform optimization\nresult = minimize(poisson_neg_loglikelihood, x0=lambda_start, args=(Y,), bounds=[(1e-6, None)])\nlambda_mle = result.x[0]\n\n# Print result\nprint(f\"MLE for lambda: {lambda_mle:.4f}\")\n\nMLE for lambda: 3.6847"
  },
  {
    "objectID": "projects/Project 1/MAA2.html#estimation-of-poisson-regression-model",
    "href": "projects/Project 1/MAA2.html#estimation-of-poisson-regression-model",
    "title": "1 DATA",
    "section": "3. Estimation of Poisson Regression Model",
    "text": "3. Estimation of Poisson Regression Model\n\nUpdate your likelihood or log-likelihood function with an additional argument to take in a covariate matrix X. Also change the parameter of the model from lambda to the beta vector. In this model, lambda must be a positive number, so we choose the inverse link function g_inv() to be exp() so that_ \\(\\lambda_i = e^{X_i'\\beta}\\). _For example:\npoisson_regression_likelihood &lt;- function(beta, Y, X){\n   ...\n}\n\nimport numpy as np\nfrom scipy.special import gammaln\n\ndef poisson_regression_neg_loglikelihood(beta, Y, X):\n    \"\"\"\n    Negative log-likelihood function for Poisson regression.\n\n    Parameters:\n    beta (array-like): Coefficient vector (including intercept).\n    Y (array-like): Response variable (count data).\n    X (2D array): Design matrix with covariates (must include intercept column).\n\n    Returns:\n    float: Negative log-likelihood value for optimization.\n    \"\"\"\n    # Linear predictor\n    eta = np.dot(X, beta)\n    # Apply exponential inverse link function to get lambda_i\n    lam = np.exp(eta)\n    \n    # Log-likelihood computation\n    log_likelihood = np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n    return -log_likelihood  # Negative for minimization\n\n\n\nUse your function along with R’s optim() or Python’s sp.optimize() to find the MLE vector and the Hessian of the Poisson model with covariates. Specifically, the first column of X should be all 1’s to enable a constant term in the model, and the subsequent columns should be age, age squared, binary variables for all but one of the regions, and the binary customer variable. Use the Hessian to find standard errors of the beta parameter estimates and present a table of coefficients and standard errors.\n\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import minimize\nfrom scipy.special import gammaln\n\n# Load the data\ndata = pd.read_csv('blueprinty.csv')  # Replace with correct path if needed\nY = data['patents'].to_numpy(dtype=np.float64)\n\n# Create covariates\ndata['age_sq'] = data['age'] ** 2\nregion_dummies = pd.get_dummies(data['region'], prefix='region', drop_first=True)\n\n# Design matrix with intercept\nX = pd.concat([\n    pd.DataFrame({'const': 1}, index=data.index),\n    data[['age', 'age_sq', 'iscustomer']],\n    region_dummies\n], axis=1)\n\nX_mat = X.to_numpy(dtype=np.float64)\n\n# Poisson negative log-likelihood function\ndef poisson_regression_neg_loglikelihood(beta, Y, X):\n    beta = np.asarray(beta, dtype=np.float64)\n    eta = X @ beta\n    lam = np.exp(eta)  # Safe use of np.exp on np.ndarray\n    ll = np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n    return -ll  # Negative for minimization\n\n# Initial guess\nbeta_start = np.zeros(X_mat.shape[1])\n\n# Run optimization\nresult = minimize(\n    poisson_regression_neg_loglikelihood,\n    beta_start,\n    args=(Y, X_mat),\n    method='BFGS'\n)\n\n# Extract results\nbeta_mle = result.x\nhessian_inv = result.hess_inv\nstd_errors = np.sqrt(np.diag(hessian_inv))\n\n# Display coefficients and standard errors\nresults_df = pd.DataFrame({\n    'Coefficient': beta_mle,\n    'Std. Error': std_errors\n}, index=X.columns)\n\nprint(\"\\nPoisson Regression Coefficients and Standard Errors:\\n\")\nprint(results_df)\n\n\nPoisson Regression Coefficients and Standard Errors:\n\n                  Coefficient  Std. Error\nconst                1.480059         1.0\nage                 38.016417         1.0\nage_sq            1033.539585         1.0\niscustomer           0.553874         1.0\nregion_Northeast     0.640979         1.0\nregion_Northwest     0.164288         1.0\nregion_South         0.181562         1.0\nregion_Southwest     0.295497         1.0\n\n\n/tmp/ipykernel_30792/1831057527.py:27: RuntimeWarning: overflow encountered in exp\n  lam = np.exp(eta)  # Safe use of np.exp on np.ndarray\n/tmp/ipykernel_30792/1831057527.py:28: RuntimeWarning: invalid value encountered in multiply\n  ll = np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n/tmp/ipykernel_30792/1831057527.py:28: RuntimeWarning: invalid value encountered in subtract\n  ll = np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n/opt/conda/lib/python3.12/site-packages/numpy/core/fromnumeric.py:88: RuntimeWarning: overflow encountered in reduce\n  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n/tmp/ipykernel_30792/1831057527.py:27: RuntimeWarning: overflow encountered in exp\n  lam = np.exp(eta)  # Safe use of np.exp on np.ndarray\n/tmp/ipykernel_30792/1831057527.py:28: RuntimeWarning: invalid value encountered in multiply\n  ll = np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n/tmp/ipykernel_30792/1831057527.py:28: RuntimeWarning: invalid value encountered in subtract\n  ll = np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n/opt/conda/lib/python3.12/site-packages/numpy/core/fromnumeric.py:88: RuntimeWarning: overflow encountered in reduce\n  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n/tmp/ipykernel_30792/1831057527.py:27: RuntimeWarning: overflow encountered in exp\n  lam = np.exp(eta)  # Safe use of np.exp on np.ndarray\n/tmp/ipykernel_30792/1831057527.py:28: RuntimeWarning: invalid value encountered in multiply\n  ll = np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n/tmp/ipykernel_30792/1831057527.py:28: RuntimeWarning: invalid value encountered in subtract\n  ll = np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n\n\n\n\nCheck your results using R’s glm() function or Python sm.GLM() function.\n\nimport pandas as pd\nimport statsmodels.api as sm\n\n# Load data\ndata = pd.read_csv('blueprinty.csv')  # Replace with your correct path\n\n# Create age squared\ndata['age_sq'] = data['age'] ** 2\n\n# Create region dummies (drop the first to avoid multicollinearity)\nregion_dummies = pd.get_dummies(data['region'], prefix='region', drop_first=True)\n\n# Combine all predictors\nX = pd.concat([\n    data[['age', 'age_sq', 'iscustomer']],\n    region_dummies\n], axis=1)\n\n# Add constant column for intercept\nX = sm.add_constant(X)\n\n# Ensure all data is float64 (fix for ValueError)\nX = X.astype(float)\nY = data['patents'].astype(float)\n\n# Fit Poisson regression model\nmodel = sm.GLM(Y, X, family=sm.families.Poisson()).fit()\n\n# Show coefficient summary table\nprint(model.summary2().tables[1])\n\n                     Coef.  Std.Err.          z         P&gt;|z|    [0.025  \\\nconst            -0.508920  0.183179  -2.778269  5.464935e-03 -0.867944   \nage               0.148619  0.013869  10.716250  8.539597e-27  0.121438   \nage_sq           -0.002970  0.000258 -11.513237  1.131496e-30 -0.003476   \niscustomer        0.207591  0.030895   6.719179  1.827509e-11  0.147037   \nregion_Northeast  0.029170  0.043625   0.668647  5.037205e-01 -0.056334   \nregion_Northwest -0.017575  0.053781  -0.326782  7.438327e-01 -0.122983   \nregion_South      0.056561  0.052662   1.074036  2.828066e-01 -0.046655   \nregion_Southwest  0.050576  0.047198   1.071568  2.839141e-01 -0.041931   \n\n                    0.975]  \nconst            -0.149896  \nage               0.175801  \nage_sq           -0.002465  \niscustomer        0.268144  \nregion_Northeast  0.114674  \nregion_Northwest  0.087833  \nregion_South      0.159778  \nregion_Southwest  0.143083  \n\n\n\n\nInterpret the results.\nInterpretation of Poisson Regression Results The Poisson regression model estimates the number of patents awarded to engineering firms as a function of several covariates, including firm age, age squared, regional location, and whether the firm is a customer of Blueprinty. The key findings are as follows:\nBlueprinty Customer Status: The coefficient for the iscustomer variable is 0.208 and statistically significant at the 1% level (p &lt; 0.001). This implies that, holding all other variables constant, firms using Blueprinty’s software experience a higher expected count of patents. Exponentiating the coefficient yields an incidence rate ratio of exp ⁡ ( 0.208 ) ≈ 1.23 exp(0.208)≈1.23, indicating that customers of Blueprinty are expected to receive approximately 23% more patents over the five-year period than non-customers. This provides empirical support for Blueprinty’s marketing claim.\nFirm Age and Age Squared: The model includes both age and age squared to capture non-linear effects. The coefficient on age is 0.149 (p &lt; 0.001), suggesting that the number of patents increases with firm age. However, the coefficient on age squared is -0.003 (p &lt; 0.001), indicating diminishing returns to age. Together, these results imply an inverted U-shaped relationship: patent success rates rise with firm age initially but taper off or decline for very mature firms.\nRegional Effects: Dummy variables for regional location were included, with one region omitted as the reference group. None of the regional coefficients were statistically significant at conventional levels (p &gt; 0.05), suggesting that regional location does not materially influence patent counts once age and software usage are controlled for.\nConclusion The results of the Poisson regression model provide strong evidence that Blueprinty’s software is positively associated with a higher rate of patent awards. Firm age is also a significant predictor, though its effect diminishes at higher levels. The analysis finds no compelling evidence that regional variation plays a significant role. These findings support the use of Blueprinty’s product among engineering firms seeking to enhance their patent success rates.\n\n\nWhat do you conclude about the effect of Blueprinty’s software on patent success? Because the beta coefficients are not directly interpretable, it may help to create two fake datasets: X_0 and X_1 where X_0 is the X data but with iscustomer=0 for every observation and X_1 is the X data but with iscustomer=1 for every observation. Then, use X_0 and your fitted model to get the vector of predicted number of patents (y_pred_0) for every firm in the dataset, and use X_1 to get Y_pred_1 for every firm. Then subtract y_pred_1 minus y_pred_0 and take the average of that vector of differences.\n\n\n# Extract coefficients and standard errors\nparams = model.params\nconf = model.conf_int()\nconf.columns = ['2.5%', '97.5%']\n\n# Compute IRR and CI by exponentiating\nirr = np.exp(params)\nirr_conf = np.exp(conf)\n\n# Combine into a summary table\nirr_summary = pd.DataFrame({\n    'IRR': irr,\n    'CI Lower (2.5%)': irr_conf['2.5%'],\n    'CI Upper (97.5%)': irr_conf['97.5%']\n})\n\n# Display\nprint(\"\\nIncidence Rate Ratios (IRR) with 95% Confidence Intervals:\\n\")\nprint(irr_summary)\n\n\nIncidence Rate Ratios (IRR) with 95% Confidence Intervals:\n\n                       IRR  CI Lower (2.5%)  CI Upper (97.5%)\nconst             0.601145         0.419814          0.860797\nage               1.160231         1.129119          1.192201\nage_sq            0.997034         0.996530          0.997538\niscustomer        1.230709         1.158397          1.307536\nregion_Northeast  1.029600         0.945223          1.121508\nregion_Northwest  0.982579         0.884279          1.091806\nregion_South      1.058191         0.954417          1.173250\nregion_Southwest  1.051877         0.958936          1.153825"
  },
  {
    "objectID": "projects/Project 1/MAA2.html#drop-rows-with-missing-values-in-relevant-variables",
    "href": "projects/Project 1/MAA2.html#drop-rows-with-missing-values-in-relevant-variables",
    "title": "1 DATA",
    "section": "# Drop rows with missing values in relevant variables",
    "text": "# Drop rows with missing values in relevant variables\nrelevant_vars = [ ‘number_of_reviews’, ‘days’, ‘room_type’, ‘bathrooms’, ‘bedrooms’, ‘price’, ‘review_scores_cleanliness’, ‘review_scores_location’, ‘review_scores_value’, ‘instant_bookable’] airbnb_clean = airbnb_df[relevant_vars].dropna()"
  },
  {
    "objectID": "projects/Project 1/MAA2.html#a-poisson-regression-model-was-used-to-analyze-how-airbnb-listing-characteristics-affect-the-number-of-reviews-which-serve-as-a-proxy-for-bookings.-the-results-indicate-that-listings-active-on-the-platform-for-longer-periods-accumulate-more-reviews-with-each-additional-day-contributing-a-small-but-statistically-significant-increase.-higher-nightly-prices-are-also-positively-associated-with-review-counts-although-the-effect-size-is-modest.",
    "href": "projects/Project 1/MAA2.html#a-poisson-regression-model-was-used-to-analyze-how-airbnb-listing-characteristics-affect-the-number-of-reviews-which-serve-as-a-proxy-for-bookings.-the-results-indicate-that-listings-active-on-the-platform-for-longer-periods-accumulate-more-reviews-with-each-additional-day-contributing-a-small-but-statistically-significant-increase.-higher-nightly-prices-are-also-positively-associated-with-review-counts-although-the-effect-size-is-modest.",
    "title": "1 DATA",
    "section": "A Poisson regression model was used to analyze how Airbnb listing characteristics affect the number of reviews, which serve as a proxy for bookings. The results indicate that listings active on the platform for longer periods accumulate more reviews, with each additional day contributing a small but statistically significant increase. Higher nightly prices are also positively associated with review counts, although the effect size is modest.",
    "text": "A Poisson regression model was used to analyze how Airbnb listing characteristics affect the number of reviews, which serve as a proxy for bookings. The results indicate that listings active on the platform for longer periods accumulate more reviews, with each additional day contributing a small but statistically significant increase. Higher nightly prices are also positively associated with review counts, although the effect size is modest."
  },
  {
    "objectID": "projects/Project 1/MAA2.html#listings-with-more-bedrooms-receive-substantially-more-reviewseach-additional-bedroom-is-linked-to-a-12.7-increase-in-expected-bookings.-importantly-room-type-significantly-affects-performance-private-rooms-receive-approximately-55-fewer-reviews-than-entire-homes-or-apartments-suggesting-a-strong-guest-preference-for-full-property-rentals.",
    "href": "projects/Project 1/MAA2.html#listings-with-more-bedrooms-receive-substantially-more-reviewseach-additional-bedroom-is-linked-to-a-12.7-increase-in-expected-bookings.-importantly-room-type-significantly-affects-performance-private-rooms-receive-approximately-55-fewer-reviews-than-entire-homes-or-apartments-suggesting-a-strong-guest-preference-for-full-property-rentals.",
    "title": "1 DATA",
    "section": "Listings with more bedrooms receive substantially more reviews—each additional bedroom is linked to a 12.7% increase in expected bookings. Importantly, room type significantly affects performance: private rooms receive approximately 55% fewer reviews than entire homes or apartments, suggesting a strong guest preference for full-property rentals.",
    "text": "Listings with more bedrooms receive substantially more reviews—each additional bedroom is linked to a 12.7% increase in expected bookings. Importantly, room type significantly affects performance: private rooms receive approximately 55% fewer reviews than entire homes or apartments, suggesting a strong guest preference for full-property rentals."
  },
  {
    "objectID": "projects/Project 1/MAA2.html#furthermore-listings-with-the-instant-book-feature-perform-better-averaging-22-more-reviews-than-those-requiring-manual-approval.-this-highlights-the-benefit-of-reducing-booking-friction-for-potential-guests.",
    "href": "projects/Project 1/MAA2.html#furthermore-listings-with-the-instant-book-feature-perform-better-averaging-22-more-reviews-than-those-requiring-manual-approval.-this-highlights-the-benefit-of-reducing-booking-friction-for-potential-guests.",
    "title": "1 DATA",
    "section": "Furthermore, listings with the “instant book” feature perform better, averaging 22% more reviews than those requiring manual approval. This highlights the benefit of reducing booking friction for potential guests.",
    "text": "Furthermore, listings with the “instant book” feature perform better, averaging 22% more reviews than those requiring manual approval. This highlights the benefit of reducing booking friction for potential guests."
  },
  {
    "objectID": "projects/Project 1/MAA2.html#overall-the-analysis-suggests-that-to-increase-bookings-hosts-may-benefit-from-offering-entire-properties-enabling-instant-booking-and-enhancing-their-listings-over-time.-these-findings-can-help-guide-pricing-and-feature-decisions-to-improve-listing-visibility-and-appeal.",
    "href": "projects/Project 1/MAA2.html#overall-the-analysis-suggests-that-to-increase-bookings-hosts-may-benefit-from-offering-entire-properties-enabling-instant-booking-and-enhancing-their-listings-over-time.-these-findings-can-help-guide-pricing-and-feature-decisions-to-improve-listing-visibility-and-appeal.",
    "title": "1 DATA",
    "section": "Overall, the analysis suggests that to increase bookings, hosts may benefit from offering entire properties, enabling instant booking, and enhancing their listings over time. These findings can help guide pricing and feature decisions to improve listing visibility and appeal.",
    "text": "Overall, the analysis suggests that to increase bookings, hosts may benefit from offering entire properties, enabling instant booking, and enhancing their listings over time. These findings can help guide pricing and feature decisions to improve listing visibility and appeal."
  }
]